iii. Preparando o ambiente – Linux

* Para os extremamente impacientes
  
  Se você só tiver tempo para digitar uma simples linha de comando, aqui está. Mas antes de rodá-la, verifique se você confia nos conteúdos de {{{http://aamm.github.io/02j/vagrant/envSetup.sh}envSetup.sh}}. A linha abaixo está pedindo ao computador para baixar tal script e executá-lo. Se o script contém qualquer coisa que pode danificar seu computador, não o execute.
  
-----------------------------------------------------------------
wget -q -O - http://aamm.github.io/02j/vagrant/envSetup.sh | bash
-----------------------------------------------------------------
  
  Se você quer entender o script acima (o que eu fortemente recomendo), continue lendo...
  
* Introdução
  
  Essa página explica o processo de criar seu ambiente se você tem Linux no seu computador. Tudo o que fazemos nesse curso é em uma máquina virtual. Por isso você precisa instalar o suporte para máquinas virtuais, para então criar uma e configurá-la.
  
  Por que nós precisamos de máquina virtual? Por que não podemos rodar tudo diretamente na nossa máquina?

  A resposta é: Porque nós queremos evitar a qualquer custo a frase “mas ele funciona na minha máquina”. Dê uma olhada:

  {{http://www.cafepress.com/+but-it-works-on-my-machine+hats-caps}}
  
  Isso é tão recorrente na áerea de TI, que até se tornou uma piada da área. Quando você escreve seus programas você terá o ambiente influenciando a forma como seu programa funciona. Talvez sua máquina virtual tenha exatamente a versão correta do Java. Talvez sua máquina tenha a quantidade correta de memória etc. Então, quando você partilha seu programa com outros programadores você começa a ver que as coisas não rodam exatamente da mesma forma em outras plataformas.

  Nós não podemos perder um tempo precioso tentando verificar cada pequena coisa que pode influenciar a execução do programa. Se todos nós rodarmos nossos programas na mesma máquina virtual nós podemos quase eliminar efeito. Assim, uma solução para um exercício rodará exatamente da mesma forma em qualquer computador não importa qual o sistema operacional real deste computador.

 Para rodar uma máquina virtual você precisa de algo que se chama hypervisor. Em uma virtualização, você tem um computador rodando dentro de um outro computador. O hypervisor é o que torna isso possível.

  O hypervisor que nós usamos se chama Virtual Box, que funciona perfeitamente bem para todas as necessidades deste curso. O problema sobre o Virtual Box é que ele demora para iniciar. Todos os detalhes chatos sobre Virtual Box são simplicados pelo Vagrant.

  O Vagrant é então um conjunto de procedimentos que facilitam o uso do Virtual Box, entre outros hypervisors. Com o Vagrant você pode digitar um comando como “criar uma máquina virtual com o Linux flavor X” e, depois de poucos minutos, você magicamente terá uma máquina virtual para usar. É realmente simples.

 Nesse guia você precisará usar tanto a máquina guest quanto quanto a máquina host, que são papéis em uma virtualização. Vamos defini-las:

  * host - Ou hospedeiro. A máquina real. Esse é o sistema operacional que roda no programa de virtualização, também conhecido como hypervisor.
  
  * guest - Ou convidado. A máquina virtual. Esse é o sistema operacional que roda em cima do hypervisor.

  []

  Há dois tipos de linhas de comando que você precisará usar: uma na máquina host e outra na máquina virtual.
  
  O que nós rodaremos no host são exatamente os comandos que nós precisamos para criar e conectar uma máquina virtual. Sua linha de comando provavelmente será diferente desta, especialmente se você usar Windows, mas eu espero que você tenha entendido a essência.

---
user@host:~$
---

  Aqui está como a linha de comando aparecerá na máquina virtual:

---
vagrant@vagrant-ubuntu-trusty-32:~$
---

  Uma vez que nós preparamos a máquina virtual, nós somente usaremos o terminal guest.

* VirtualBox

  A primeira coisa que você deve fazer é se certificar de que o VirtualBox está instalado. No Ubuntu/Debian você precisará somente digitar:

---
user@host:~$ sudo apt-get install virtualbox
---

* Vagrant
  
  Depois do VirtualBox, você precisa instalar Vagrant, que, como dissemos, torna mais simples usar virtualização.
  
  Se você está rodando Ubuntu ou Debian Linux, você necessita rodar:
  
---
user@host:~$ sudo apt-get install vagrant
user@host:~$ mkdir JavaClasses
user@host:~$ cd JavaClasses
user@host:~/JavaClasses$
---
  
  Antes de continuarmos, precisamos introduzir alguns comando do Linux:
  
  * <<<mkdir>>> - para criar um diretório no Linux.
  
  * <<<ls>>> - para listar os conteúdos do presente diretório no Linux.
  
  * <<<cd>>> - para mudar o diretório atual.
  
  []
  
  Agora copie os seguintes arquivos para o diretório JavaClasses:
  
  * {{{./vagrant/Vagrantfile}Vagrantfile}}
  
  * {{{./vagrant/install.sh}install.sh}}
  
  []
  
  Depois de copiar esses arquivos para o JavaClasses, rode o seguinte comando para instalar um plugin que permite que você controle os snapshots do Vagrant. Você pode ver mais detalhes sobre snapshots de máquina virtual na próxima aula: {{{./iv-vagrant-mini-tutorial.html}iv. Vagrant mini tutorial}}.
  
---
user@host:~/JavaClasses$ vagrant plugin install vagrant-vbox-snapshot
---
  
  A seguir, inicie a máquina virtual usando o seguinte comando:
  
---
user@host:~/JavaClasses$ vagrant up
---
  
  Esse último comando tomará um pouco de tempo e baixará alguns arquivos da Internet. Mas, não se preocupe, se você administrar o Vagrant, você nunca mais precisará baixar todos eles novamente. Nós usaremos um snapshot chamado "clean". Um snapshot é um estado de máquina virtual. Nós usaremos um snapshot porque mais tarde nós voltaremos para aquele estado.
  
  Agora que nós instalamos tudo, é hora de usar nosso snapshot principal:
  
---
user@host:~/JavaClasses$ vagrant halt
user@host:~/JavaClasses$ vagrant snapshot take clean
---
  
  É isso. Neste ponto você deve ter tudo que precisa para começar as aulas. Mas vale a pena verificar se tudo está funcionando bem. Então se houver qualquer erro na instalação, você pode tentar consertá-lo.
  
Verificando a instalação
  
  A seguir, nós chamaremos a máquina virtual novamente e conectaremos ao seu console:
  
---
user@host:~/JavaClasses$ vagrant up
user@host:~/JavaClasses$ vagrant ssh
---
  
  Dependendo da sua plataforma, o Vagrant reclamará do primeiro comando que a máquina virtual estiver rodando, mas tal reclamação é inofensiva. Depois do segundo comando você verá a seguinte mensagem:
  
---
Welcome to Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-36-generic i686)

 * Documentation:  https://help.ubuntu.com/

  System information as of Tue Oct  7 14:30:31 UTC 2014

  System load:  0.41              Processes:           78
  Usage of /:   2.6% of 39.34GB   Users logged in:     0
  Memory usage: 15%               IP address for eth0: 10.0.2.15
  Swap usage:   0%

  Graph this data and manage this system at:
    https://landscape.canonical.com/

  Get cloud support with Ubuntu Advantage Cloud Guest:
    http://www.ubuntu.com/business/services/cloud

0 packages can be updated.
0 updates are security updates.


vagrant@vagrant-ubuntu-trusty-32:~$ 
---

  Isso significa que você instalou corretamente a nova máquina virtual e que o Vagrant está funcionando bem.

Seu primeiro programa em Java

  Digite a mensagem a seguir no seu terminal:

---
vagrant@vagrant-ubuntu-trusty-32:~$ echo 'class A { public static void main(String[] args) { System.out.println("Hello World!"); }}' > A.java
vagrant@vagrant-ubuntu-trusty-32:~$ javac A.java
vagrant@vagrant-ubuntu-trusty-32:~$ java A
----

  Você verá:

---
Hello World!
---

  Parabéns! Você acabou de criar seu primeiro programa Java, compilou-o e executou-o!

  Não se preocupe sobre os detalhes. Você verá mais tarde o que cada um desses comandos significa.

  Agora vamos limpar tudo para que você possa começar com tudo limpinho:

---
vagrant@vagrant-ubuntu-trusty-32:~$ exit
user@host:~/JavaClasses$ vagrant snapshot go clean
vagrant@vagrant-ubuntu-trusty-32:~$
----

  A próxima sessão introduzirá os conceitos básicos do Vagrant. Então esses comandos começarão a fazer mais sentido.

===

Referências

  VirtualBox: {{https://www.virtualbox.org/}}
  
  Vagrant: {{https://www.vagrantup.com/}}
  
  Java: {{http://www.oracle.com/technetwork/java/index.html}}
  
  Maven: {{http://maven.apache.org/}}

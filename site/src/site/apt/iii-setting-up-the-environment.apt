iii. Settting up the environment

* Introduction

  This page explains the process to create your environment. Everything we do in this course is on a virtual machine. So you need to install support for virtual machines, then create one and configure it.

  Why do we need a virtual machine? Why can't I run everything directly on my machine?

  The answer is because we want to avoid "but it works on my machine" at any cost. Take a look:

  {{http://www.cafepress.com/+but-it-works-on-my-machine+hats-caps}}
  
  This is so recurring in the IT field that it even became an inside joke. When you write your programs you will have the environment influencing the way your programs work. Perhaps your machine has just the right version of Java. Perhaps your machine has just the right amount of memory. etc etc. So when you share your program with other programmers you start to see that things do not run exactly the same way on other platforms.

  We cannot waste precious time trying to check every single thing that can influence program execution. If we all run our programs on the same virtual machine we can almost eliminate such effect. So a solution for an exercise will run precisely the same way on everyone's computer no matter the actual operating system that this computer has.

  In order to run a virtual machine you need what is called a hypervisor. In a virtualization, you have one computer running inside of another computer. The hypervisor is what makes such a thing possible.

  The hypervisor we will use is called Virtual Box, which works pretty well for our needs on this course. The problem about Virtual Box is that it takes time to get started with it. All the boring details about Virtual Box are made much more simple by Vagrant.

  Vagrant is then a set of procedures to make it easy to use Virtual Box, among other hypervisors. With Vagrant you can type a command like "create a virtual machine with Linux flavor X" and after a couple of minutes you magically have a virtual machine for you to use. It is that simple.

  On this guide you will need to use both the guest and the host machines, which are roles in a virtualization. Let us define them:

  * host - The real machine. This is the operating system that runs the virtualization program, aka. hypervisor.
  
  * guest - The virtual machine. This is the virtual operating system that runs on top of the hypervisor.

  []

  There are two sorts of command lines you will need to use: one on the host machine and another on the virtual machine.
  
  What we will run on the host are just the commands we need to create and connect to the virtual machine. Your command line will most likely be different from this one, especially if you use Windows, but I hope you got the gist.

---
user@host:~$
---

  Here is how the command line will look like on the virtual machine:

---
vagrant@vagrant-ubuntu-trusty-32:~$
---

  Once we have set the virtual machine, we will only use the guest terminal.

* VirtualBox

  The first thing you need to do is to make sure you have VirtualBox installed. On Ubuntu/Debian, you only need to type:

---
user@host:~$ sudo apt-get install virtualbox
---

* Vagrant
  
  After VirtualBox, you need to install Vagrant, which, as we said, makes it simpler to use virtualization.
  
  If you are running Ubuntu or Debian Linux, you need to run:
  
---
user@host:~$ sudo apt-get install vagrant
user@host:~$ mkdir JavaClasses
user@host:~$ cd JavaClasses
user@host:~/JavaClasses$
---
  
  Before we continue, we need to introduce a few Linux commands:
  
  * <<<mkdir>>> - to make a directory on Linux.
  
  * <<<ls>>> - to list the contents of the current directory.
  
  * <<<cd>>> - to change the current directory.
  
  []
  
  Now copy the following files to the JavaClasses directory:
  
  * {{{./vagrant/Vagrantfile}Vagrantfile}}
  
  * {{{./vagrant/install.sh}install.sh}}
  
  []
  
  After copying those files to JavaClasses, run the following to install a plugin that allows you to control Vagrant snapshots. You can see more details about virtual machine snapshots on the next lesson: {{{iv-vagrant-mini-tutorial.html}iv. Vagrant mini tutorial}}.
  
---
user@host:~/JavaClasses$ vagrant plugin install vagrant-vbox-snapshot
---
  
  Next, start the virtual machine using the following command:
  
---
user@host:~/JavaClasses$ vagrant up
---
  
  This last command will take some time and download a lot of files from the Internet. But, don't worry, if you correctly manage Vagrant you will never need to download all that again. We will take a snapshot called "clean". A snapshot is a virtual machine state. We take a snapshot because we want to go back to that state later.
  
  Now that we have installed everything it is time to take our main snapshot:
  
---
user@host:~/JavaClasses$ vagrant halt
user@host:~/JavaClasses$ vagrant snapshot take clean
---
  
  That is it. At this point you should have everything you need to start the lessons. But it is worth checking if everything is working fine. So if there was any glitch on the installation you can try to fix it.
  
Checking the installation
  
  Next we will bring the virtual machine up again and connect to the its console:
  
---
user@host:~/JavaClasses$ vagrant up
user@host:~/JavaClasses$ vagrant ssh
---
  
  Depending on your platform, Vagrant will complain on the first command that the virtual machine was already running, but such complaint is harmless. After the second command you will see the following:
  
---
Welcome to Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-36-generic i686)

 * Documentation:  https://help.ubuntu.com/

  System information as of Tue Oct  7 14:30:31 UTC 2014

  System load:  0.41              Processes:           78
  Usage of /:   2.6% of 39.34GB   Users logged in:     0
  Memory usage: 15%               IP address for eth0: 10.0.2.15
  Swap usage:   0%

  Graph this data and manage this system at:
    https://landscape.canonical.com/

  Get cloud support with Ubuntu Advantage Cloud Guest:
    http://www.ubuntu.com/business/services/cloud

0 packages can be updated.
0 updates are security updates.


vagrant@vagrant-ubuntu-trusty-32:~$ 
---

  This means you have successfully installed a new virtual machine and Vagrant is working fine.

Your first Java program

  Type the following on the terminal:

---
vagrant@vagrant-ubuntu-trusty-32:~$ echo 'class A { public static void main(String[] args) { System.out.println("Hello World!"); }}' > A.java
vagrant@vagrant-ubuntu-trusty-32:~$ javac A.java
vagrant@vagrant-ubuntu-trusty-32:~$ java A
----

  You will see 

---
Hello World!
---

  Congratulations! You just created your first Java program, compiled it, and executed it!

  Don't worry about the details. We will see later what each of those commands mean.

  Now let's clean everything so you can start anew:

---
vagrant@vagrant-ubuntu-trusty-32:~$ exit
user@host:~/JavaClasses$ vagrant snapshot clean
vagrant@vagrant-ubuntu-trusty-32:~$
----

  The following section will introduce the basic concepts of Vagrant. So these commands will start to make more sense.

===

References

  VirtualBox: {{https://www.virtualbox.org/}}
  
  Vagrant: {{https://www.vagrantup.com/}}
  
  Java: {{http://www.oracle.com/technetwork/java/index.html}}
  
  Maven: {{http://maven.apache.org/}}